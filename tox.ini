[tox]
minversion = 2.0
skipsdist = True
envlist = py27,bashate,flake8,ansible-lint,commit-message-validate,verify-copyright,file-format

[testenv]
usedevelop = True
install_command = pip install -U {opts} {packages}
setenv = VIRTUAL_ENV={envdir}
envdir = {toxinidir}/.tox/py27
deps = -r{toxinidir}/test-requirements.txt
whitelist_externals =
    /bin/bash
    /usr/bin/find
commands =
    find . -type f -name "*.pyc" -delete
    python setup.py testr

[testenv:bashate]
basepython = python2.7
commands =
    bash -c "find {toxinidir} \
    -path {toxinidir}/.tox -prune -o -name '*.sh' -print | xargs \
    bashate --error E006 -v"

whitelist_externals = bash

[testenv:pycodestyle]
basepython = python2.7
commands =
    pycodestyle scripts/python/ tests/

[testenv:flake8]
basepython = python2.7
commands =
    flake8

[flake8]
exclude =
    .venv,.git,.tox,*lib/python*,*egg,build,pup-venv
ignore =
    E402,E501,F403,F405,E722,F812

[testenv:pylint]
basepython = python2.7
deps =
    pyflakes
    pylint
commands =
    pylint scripts/python/ tests/

[testenv:pylint-errors]
basepython = python2.7
deps =
    pyflakes
    pylint
commands =
    pylint --errors-only scripts/python/ tests/

[testenv:ansible-lint]
basepython = python2.7
commands =
    # Perform an Ansible lint check
    bash -c "find {toxinidir} -name '*.yml' -o -name '*.yaml' | xargs \
    ansible-lint -x ANSIBLE0006,ANSIBLE0012,ANSIBLE0013,ANSIBLE0014,ANSIBLE0016"

[testenv:commit-message-validate]
basepython = python2.7
commands =
    bash -c "{toxinidir}/tests/commit_message_validate.py"

[testenv:verify-copyright]
basepython = python2.7
commands =
    bash -c "{toxinidir}/tests/verify_copyright.py"

[testenv:linters]
basepython = python2.7
commands =
    {[testenv:flake8]commands}
    {[testenv:bashate]commands}
    {[testenv:ansible-lint]commands}

[testenv:file-format]
basepython = python2.7
commands =
    bash -c "! find {toxinidir} \
    \( -path '{toxinidir}/pup-venv' -o -path '{toxinidir}/\.tox' -o -path '{toxinidir}/\.git' -o -path '{toxinidir}/\.eggs' \) \
    -prune -o -print | \
    xargs file | \
    egrep 'with (CR|CRLF) line terminators'"
