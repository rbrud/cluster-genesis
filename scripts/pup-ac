# Copyright 2018 IBM Corp.
#
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_pup()
{
    local cur prev opts prev_2 prev_3 comm_opts pup_path
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"

    if [[ $COMP_CWORD -ge 1  ]]; then
        prev="${COMP_WORDS[COMP_CWORD-1]}"
    fi

    if [[ $COMP_CWORD -ge 2  ]]; then
        prev_2="${COMP_WORDS[COMP_CWORD-2]}"
    fi

    if [[ $COMP_CWORD -ge 3  ]]; then
        prev_3="${COMP_WORDS[COMP_CWORD-3]}"
    fi

    pup_path=${PATH%%power-up*}
    pup_path=${pup_path##*:}power-up/

    cmd="pup"
    cwd=`pwd`

    comm_opts=" --help --all --log-level-file --log-level-print"

    if [[ ${prev} == "$cmd" ]] && [[ ${cur} == -* ]]; then
        opts=$comm_opts
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    if ([[ ${prev} == -p ]] || [[ ${prev} == -f ]] || \
        [[ ${prev} == --log-level-file ]] || \
        [[ ${prev} == --log-level-print ]]); then
        opts="nolog debug info warning error critical"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    if ([[ ${prev_2} == -p ]] || [[ ${prev_2} == -f ]] || \
        [[ ${prev_2} == --log-level-file ]] || \
        [[ ${prev_2} == --log-level-print ]]); then
        return 0
    fi

    if ([[ ${prev} == software ]] && [[ ${prev_2} == "$cmd" ]]) || \
            ([[ ${prev_2} == software ]] && [[ ${prev_3} == "$cmd" ]]); then
        if [[ ${cur} != -* ]]; then
            files=`ls "$pup_path"software/*.py 2>/dev/null | sed -E 's/(.+)\///'`
            COMPREPLY=( $( compgen -W "${files[@]}" -- ${cur} ) )
        else
            opts="--prep --init-clients --install --status --README"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        fi
        return 0
    fi

    if ([[ ${prev_3} == "$cmd" ]] && [[ ${prev} == --* ]]) || \
            ([[ ${prev_2} == "$cmd" ]] && ([[ ${prev} == deploy ]] || \
            [[ ${prev} == post-deploy ]]) && [[ ${cur} != -* ]]); then
        files=`ls -1 "$cur"*.yml 2>/dev/null`
        COMPREPLY=( $( compgen -o plusdirs -X "*inventory*.yml" -W "${files[@]}" -- ${cur} ) )
        return 0
    fi

    if [[ ${prev} == setup ]]; then
        opts="--networks --gateway"
    elif [[ ${prev} == config ]]; then
        opts="--create-container --mgmt-switches --data-switches "
    elif [[ ${prev} == validate ]]; then
        opts="--config-file --cluster-hardware"
    elif [[ ${prev} == deploy ]]; then
        opts="--create-inventory --install-cobbler --download-os-images "
        opts+="--inv-add-ports-ipmi --inv-add-ports-pxe --reserve-ipmi-pxe-ips "
        opts+="--add-cobbler-distros --add-cobbler-systems --install-client-os "
        opts+="$comm_opts"
    elif [[ ${prev} == post-deploy ]]; then
        opts="--ssh-keyscan --gather-mac-addr --config-client-os "
        opts+="--lookup-interface-names"
        opts="$opts""$comm_opts"
    elif [[ ${prev} == utils ]]; then
        opts="--scan-pxe-network --scan-ipmi-network"
    elif [[ ${prev} == "$cmd" ]]; then
        opts="setup config validate deploy post-deploy software utils --help"
    fi
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
}

complete -o filenames -F _pup pup
